- Copyright (C) 2023 The go-sqltest Authors. All rights reserved.
-
- Licensed under the Apache License, Version 2.0 (the "License");
- you may not use this file except in compliance with the License.
- You may obtain a copy of the License at
-
-  http:-www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.

drop table if exists pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers
{
}
create table pgbench_history(tid int,bid int,aid int,delta int,mtime timestamp,filler char(22))
{
}
create table pgbench_tellers(tid int not null,bid int,tbalance int,filler char(84)) with (fillfactor=100)
{
}
create table pgbench_accounts(aid int not null,bid int,abalance int,filler char(84)) with (fillfactor=100)
{
}
create table pgbench_branches(bid int not null,bbalance int,filler char(88)) with (fillfactor=100)
{
}
begin
{
}
select count(*) from pgbench_branches
{
	"rows" :
	[
		{
			"count(*)" : 0
		}
	]
}
select o.n, p.partstrat, pg_catalog.count(i.inhparent) from pg_catalog.pg_class as c join pg_catalog.pg_namespace as n on (n.oid = c.relnamespace) cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas(true), n.nspname)) as o(n) left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) left join pg_catalog.pg_inherits as i on (c.oid = i.inhparent) where c.relname = 'pgbench_accounts' and o.n is not null group by 1, 2 order by 1 asc limit 1
{
	"rows" :
	[
		{
			"n" : 2,
			"partstrat" : null,
			"count(i.inhparent)" : 0
		}
	]
}
truncate table pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers
{
}
insert into pgbench_branches(bid,bbalance) values(1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (1,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (2,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (3,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (4,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (5,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (6,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (7,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (8,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (9,1,0)
{
}
insert into pgbench_tellers(tid,bid,tbalance) values (10,1,0)
{
}
vacuum analyze pgbench_branches
{
}
vacuum analyze pgbench_tellers
{
}
vacuum analyze pgbench_accounts
{
}
vacuum analyze pgbench_history
{
}
alter table pgbench_branches add primary key (bid)
{
}
alter table pgbench_tellers add primary key (tid)
{
}
alter table pgbench_accounts add primary key (aid)
{
}
select count(*) from pgbench_branches
{
}
select o.n, p.partstrat, pg_catalog.count(i.inhparent) from pg_catalog.pg_class as c join pg_catalog.pg_namespace as n on (n.oid = c.relnamespace) cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas(true), n.nspname)) as o(n) left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) left join pg_catalog.pg_inherits as i on (c.oid = i.inhparent) where c.relname = 'pgbench_accounts' and o.n is not null group by 1, 2 order by 1 asc limit 1
{
}
vacuum pgbench_branches
{
}
vacuum pgbench_tellers
{
}
truncate pgbench_history
{
}
